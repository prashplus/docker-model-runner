name: Docker Model Runner CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: docker-model-runner

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install client dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r client-requirements.txt
    
    - name: Build Docker image
      run: docker build -t $IMAGE_NAME .
    
    - name: Run container
      run: |
        docker run -d -p 8000:8000 --name model-runner-test $IMAGE_NAME
        sleep 30  # Wait for container to start
    
    - name: Run health check
      run: |
        curl -f http://localhost:8000/health || exit 1
    
    - name: Run API tests
      run: |
        python client.py --mode test --url http://localhost:8000
    
    - name: Stop container
      if: always()
      run: docker stop model-runner-test || true
    
    - name: Remove container
      if: always()
      run: docker rm model-runner-test || true

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
